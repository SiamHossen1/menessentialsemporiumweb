<style>
  .main_cart_container{
    min-height: 40vh;
    margin-top: {{section.settings.cart_top_margin| times: 0.5 | round: 0}}px;
    margin-bottom: {{section.settings.cart_bottom_margin| times: 0.5 | round: 0}}px;
  }
  @media screen and (min-width: 768px) {
    .main_cart_container {
      margin-top: {{section.settings.cart_top_margin}}px;
      margin-bottom: {{section.settings.cart_bottom_margin}}px;
    }
  }
  .cart-quantity-selector {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 12rem;
    padding: 0.5rem;
    margin-top: 0.4rem;
    background-color: #f6f7fa;
    border-radius: 0.5rem;
  }

  .cart-quantity-selector button {
    all: unset;
    cursor: pointer;
    color: rgb(94, 94, 94);
  }

  .cart-quantity-selector input {
    width: 3rem;
    -moz-appearance: textfield;
    border: none;
    text-align: center;
    background-color: #f6f7fa;
    font-size: 1.5rem;
    color: var(--base-color);
  }
</style>
<section class="main_cart_container">
  <div class="cart-drawer-box">
    <header class="cart-drawer-header">
      <h2>Your cart</h2>
      <div class="cart-drawer-header-right">
        <span class="cart-drawer-header-right-items">{{ cart.item_count }} items</span>
      </div>
    </header>

    {% form 'cart', cart, class: 'cart-drawer-form' %}
      {% if cart.item_count == 0 %}
        <p class="cart-drawer-empty">Your cart is empty</p>
      {% else %}
        <div class="cart-drawer-items">
          {% for item in cart.items %}
            <div class="cart-drawer-item" data-line-item-key="{{ item.key }}">
              <div class="cart-drawer-item-image">
                <img src="{{ item.image | img_url: '200x' }}" alt="{{ item.title }}">
              </div>
              <div class="cart-drawer-item-main">
                <div class="cart-drawer-item-main-flex">
                  <div class="cart-drawer-item-main-flex-left">
                    <h3>
                      <a href="{{ item.url }}">{{ item.product.title }}</a>
                    </h3>
                    <span>{{ item.variant.title }}</span>
                    <div class="cart-quantity-selector">
                      <button class="cart-drawer-quantity-selector-minus" type="button">
                        {% render 'icon-minus.liquid' %}
                      </button>
                      <input type="text" readonly value="{{ item.quantity }}">
                      <button class="cart-drawer-quantity-selector-plus" type="button">
                        {% render 'icon-plus.liquid' %}
                      </button>
                    </div>
                  </div>
                  <div class="cart-drawer-item-main-flex-right">
                    <span>{{ item.final_line_price | money_without_trailing_zeros }}</span>
                  </div>
                </div>
              </div>
            </div>
          {% endfor %}
        </div>

        <footer class="cart-drawer-footer">
          {% if cart.total_discounts > 0 %}
            <div class="cart-drawer-footer-row">
              <h3>Discounts</h3>
              <span>{{ cart.total_discounts | money_without_trailing_zeros }}</span>
            </div>
          {% endif %}
          <div class="cart-drawer-footer-row">
            <h3>Subtotal</h3>
            <span>{{ cart.total_price | money_without_trailing_zeros }}</span>
          </div>
          <a href="/cart/clear" id="clear-cart-button">Clear All</a>
          <button type="submit" name="checkout" class="cart-drawer-button">Checkout</button>
        </footer>
      {% endif %}
    {% endform %}
  </div>
</section>
<script>
  function updateCartItemCounts(count) {
    document.querySelectorAll('.cart_item_counter').forEach((el) => {
      el.textContent = count;
    });
  }

  async function updateCartDrawer() {
    const res = await fetch('/?section_id=main-cart-items');
    const text = await res.text();
    const html = document.createElement('div');
    html.innerHTML = text;

    const newBox = html.querySelector('.main_cart_container').innerHTML;

    document.querySelector('.main_cart_container').innerHTML = newBox;

    addCartDrawerListeners();
  }

  function addCartDrawerListeners() {
    // Update quantities
    document.querySelectorAll('.cart-quantity-selector button').forEach((button) => {
      button.addEventListener('click', async () => {
        // Get line item key
        const rootItem = button.parentElement.parentElement.parentElement.parentElement.parentElement;
        const key = rootItem.getAttribute('data-line-item-key');

        // Get new quantity
        const currentQuantity = Number(button.parentElement.querySelector('input').value);
        const isUp = button.classList.contains('cart-drawer-quantity-selector-plus');
        const newQuantity = isUp ? currentQuantity + 1 : currentQuantity - 1;

        // Ajax update
        const res = await fetch('/cart/update.js', {
          method: 'post',
          headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ updates: { [key]: newQuantity } }),
        });
        const cart = await res.json();
        updateCartItemCounts(cart.item_count);

        // Update cart
        updateCartDrawer();
      });
    });

    document.querySelector('.cart-drawer-box').addEventListener('click', (e) => {
      e.stopPropagation();
    });

    document.querySelectorAll('.cart-drawer-header-right-close, .cart-drawer').forEach((el) => {
      el.addEventListener('click', () => {
        closeCartDrawer();
      });
    });
  }

  addCartDrawerListeners();

  document.querySelectorAll('form[action="/cart/add"]').forEach((form) => {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      // Submit form with ajax
      await fetch('/cart/add', {
        method: 'post',
        body: new FormData(form),
      });

      // Get cart count
      const res = await fetch('/cart.js');
      const cart = await res.json();
      updateCartItemCounts(cart.item_count);

      // Update cart
      await updateCartDrawer();

      // Open cart drawer
      openCartDrawer();
    });
  });

  document.querySelectorAll('a[href="/cart"]').forEach((a) => {
    a.addEventListener('click', (e) => {
      e.preventDefault();
      openCartDrawer();
    });
  });

  let clearCartButton = document.getElementById('clear-cart-button');

  clearCartButton?.addEventListener('click', (e) => {
    e.preventDefault();
    // Send a POST request to clear the cart
    fetch('/cart/clear.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
    })
      .then(function (response) {
        if (response.ok) {
          location.reload();
        } else {
          console.error('Error clearing the cart:', response.statusText);
        }
      })
      .catch(function (error) {
        // Handle any network or other errors
        console.error('Network error:', error);
      });
  });
</script>
{% schema %}
{
  "name": "Cart",
  "settings": [
    {
      "type": "header",
      "content": "Section margin"
    },
    {
      "type": "range",
      "id": "cart_top_margin",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Top margin",
      "default": 45
    },
    {
      "type": "range",
      "id": "cart_bottom_margin",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Bottom margin",
      "default": 45
    }
  ],
  "presets": [
    {
      "name": "Cart"
    }
  ]
}
{% endschema %}
